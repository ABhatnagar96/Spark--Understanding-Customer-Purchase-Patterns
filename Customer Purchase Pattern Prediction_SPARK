{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ac486ffd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# importing the required libraries\n",
    "from pyspark.sql import SparkSession\n",
    "import pyspark.sql.types as tp\n",
    "from pyspark.sql import functions as F\n",
    "import seaborn as sns\n",
    "# libraries to make plots\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2c2dbe69",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create spark session\n",
    "spark = SparkSession.builder.getOrCreate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9a972580",
   "metadata": {},
   "outputs": [],
   "source": [
    "# reading the train data\n",
    "train_data = spark.read.csv(\"spark_work/train.csv\",inferSchema=True, header=True)\n",
    "\n",
    "# reading the test data\n",
    "test_data  = spark.read.csv(\"spark_work/test.csv\", inferSchema=True, header=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "cb188211",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- User_ID: integer (nullable = true)\n",
      " |-- Product_ID: string (nullable = true)\n",
      " |-- Gender: string (nullable = true)\n",
      " |-- Age: string (nullable = true)\n",
      " |-- Occupation: integer (nullable = true)\n",
      " |-- City_Category: string (nullable = true)\n",
      " |-- Stay_In_Current_City_Years: string (nullable = true)\n",
      " |-- Marital_Status: integer (nullable = true)\n",
      " |-- Product_Category_1: integer (nullable = true)\n",
      " |-- Product_Category_2: integer (nullable = true)\n",
      " |-- Product_Category_3: integer (nullable = true)\n",
      " |-- Purchase: integer (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# data type of the columns\n",
    "train_data.printSchema()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "b07ca4f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "root\n",
      " |-- User_ID: integer (nullable = true)\n",
      " |-- Product_ID: string (nullable = true)\n",
      " |-- Gender: string (nullable = true)\n",
      " |-- Age: string (nullable = true)\n",
      " |-- Occupation: integer (nullable = true)\n",
      " |-- City_Category: string (nullable = true)\n",
      " |-- Stay_In_Current_City_Years: string (nullable = true)\n",
      " |-- Marital_Status: integer (nullable = true)\n",
      " |-- Product_Category_1: integer (nullable = true)\n",
      " |-- Product_Category_2: integer (nullable = true)\n",
      " |-- Product_Category_3: integer (nullable = true)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# data type of the columns\n",
    "test_data.printSchema()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0b80bdfd",
   "metadata": {},
   "source": [
    "Predicting variable is the Purchase amount\n",
    "\n",
    "ASK-\n",
    " they want to build a model to predict the purchase amount of customer against various products which will help them to create personalized offer for customers against different products."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "183a0648",
   "metadata": {},
   "source": [
    " #### `Exploring the Target Variable`\n",
    "\n",
    "---\n",
    "\n",
    "The `Target Variable` for our use-case is `Purchase` and this column has `Integer` data type. Which implies that our prediction will be of continuous type.\n",
    "\n",
    "\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "42cdb53e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Exploring column Purchase\n",
    "purchase_df = train_data.select(\"purchase\")\n",
    "purchase_pd = purchase_df.toPandas()\n",
    "# Set the style of the plot\n",
    "sns.set(style=\"whitegrid\")\n",
    "\n",
    "# Create a figure and axis\n",
    "plt.figure(figsize=(10, 6))\n",
    "\n",
    "# Plot the data\n",
    "sns.histplot(purchase_pd[\"purchase\"], kde=True)\n",
    "\n",
    "# Add title and labels\n",
    "plt.title(\"Distribution of Purchase Amounts\")\n",
    "plt.xlabel(\"Purchase Amount\")\n",
    "plt.ylabel(\"Frequency\")\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8cd4ce1",
   "metadata": {},
   "source": [
    "#### `CHECK FOR THE NULL VALUES IN EACH COLUMN`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2cba7582",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "User_ID: 0\n",
      "Product_ID: 0\n",
      "Gender: 0\n",
      "Age: 0\n",
      "Occupation: 0\n",
      "City_Category: 0\n",
      "Stay_In_Current_City_Years: 0\n",
      "Marital_Status: 0\n",
      "Product_Category_1: 0\n",
      "Product_Category_2: 173638\n",
      "Product_Category_3: 383247\n",
      "Purchase: 0\n"
     ]
    }
   ],
   "source": [
    "### Detecting null values in each column\n",
    "for c in train_data.columns:\n",
    "    # Define the condition to check for null values\n",
    "    missing_values = train_data.filter(F.col(c).isNull()).count()\n",
    "    \n",
    "    # Print the result\n",
    "    print(f\"{c}: {missing_values}\")\n",
    "## All missing values will be looked into at the pre processing stage"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "892ef086",
   "metadata": {},
   "source": [
    "#### `Distinct Values in Each Column`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "10f40b75",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table border='1'>\n",
       "<tr><th>User_ID</th><th>Product_ID</th><th>Gender</th><th>Age</th><th>Occupation</th><th>City_Category</th><th>Stay_In_Current_City_Years</th><th>Marital_Status</th><th>Product_Category_1</th><th>Product_Category_2</th><th>Product_Category_3</th><th>Purchase</th></tr>\n",
       "<tr><td>5891</td><td>3631</td><td>2</td><td>7</td><td>21</td><td>3</td><td>5</td><td>2</td><td>20</td><td>17</td><td>15</td><td>18105</td></tr>\n",
       "</table>\n"
      ],
      "text/plain": [
       "+-------+----------+------+---+----------+-------------+--------------------------+--------------+------------------+------------------+------------------+--------+\n",
       "|User_ID|Product_ID|Gender|Age|Occupation|City_Category|Stay_In_Current_City_Years|Marital_Status|Product_Category_1|Product_Category_2|Product_Category_3|Purchase|\n",
       "+-------+----------+------+---+----------+-------------+--------------------------+--------------+------------------+------------------+------------------+--------+\n",
       "|   5891|      3631|     2|  7|        21|            3|                         5|             2|                20|                17|                15|   18105|\n",
       "+-------+----------+------+---+----------+-------------+--------------------------+--------------+------------------+------------------+------------------+--------+"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#How many distinct values per column?\n",
    "\n",
    "train_data.agg(*(F.countDistinct(F.col(c)).alias(c) for c in train_data.columns))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a9c3bd5",
   "metadata": {},
   "source": [
    "#### Columns Product_Category_1, Product_Category_2, Product_Category_3\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9054e803",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------+----------+------+----+----------+-------------+--------------------------+--------------+------------------+------------------+------------------+--------+\n",
      "|User_ID|Product_ID|Gender| Age|Occupation|City_Category|Stay_In_Current_City_Years|Marital_Status|Product_Category_1|Product_Category_2|Product_Category_3|Purchase|\n",
      "+-------+----------+------+----+----------+-------------+--------------------------+--------------+------------------+------------------+------------------+--------+\n",
      "|1000001| P00069042|     F|0-17|        10|            A|                         2|             0|                 3|              null|              null|    8370|\n",
      "|1000001| P00248942|     F|0-17|        10|            A|                         2|             0|                 1|                 6|                14|   15200|\n",
      "|1000001| P00087842|     F|0-17|        10|            A|                         2|             0|                12|              null|              null|    1422|\n",
      "|1000001| P00085442|     F|0-17|        10|            A|                         2|             0|                12|                14|              null|    1057|\n",
      "|1000002| P00285442|     M| 55+|        16|            C|                        4+|             0|                 8|              null|              null|    7969|\n",
      "+-------+----------+------+----+----------+-------------+--------------------------+--------------+------------------+------------------+------------------+--------+\n",
      "only showing top 5 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Converting the columns to catagorical type- Product_Category_1\tProduct_Category_2\tProduct_Category_3\t\n",
    "from pyspark.sql.functions import col\n",
    "from pyspark.ml.feature import StringIndexer\n",
    "\n",
    "# Convert the columns to StringType\n",
    "train_data = train_data.withColumn(\"Product_Category_1\", col(\"Product_Category_1\").cast(\"string\"))\n",
    "train_data = train_data.withColumn(\"Product_Category_2\", col(\"Product_Category_2\").cast(\"string\"))\n",
    "train_data = train_data.withColumn(\"Product_Category_3\", col(\"Product_Category_3\").cast(\"string\"))\n",
    "\n",
    "# Show the result\n",
    "train_data.show(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "351d2e65",
   "metadata": {},
   "outputs": [],
   "source": [
    "# translating to the test data set\n",
    "test_data = test_data.withColumn(\"Product_Category_1\", col(\"Product_Category_1\").cast(\"string\"))\n",
    "test_data = test_data.withColumn(\"Product_Category_2\", col(\"Product_Category_2\").cast(\"string\"))\n",
    "test_data = test_data.withColumn(\"Product_Category_3\", col(\"Product_Category_3\").cast(\"string\"))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "dc0ce0af",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------------+------+\n",
      "|Product_Category_1|  PC_1|\n",
      "+------------------+------+\n",
      "|                 5|150933|\n",
      "|                 1|140378|\n",
      "|                 8|113925|\n",
      "|                11| 24287|\n",
      "|                 2| 23864|\n",
      "|                 6| 20466|\n",
      "|                 3| 20213|\n",
      "|                 4| 11753|\n",
      "|                16|  9828|\n",
      "|                15|  6290|\n",
      "|                13|  5549|\n",
      "|                10|  5125|\n",
      "|                12|  3947|\n",
      "|                 7|  3721|\n",
      "|                18|  3125|\n",
      "|                20|  2550|\n",
      "|                19|  1603|\n",
      "|                14|  1523|\n",
      "|                17|   578|\n",
      "|                 9|   410|\n",
      "+------------------+------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Checking distribution of purchases across catagories\n",
    "\n",
    "# number of datapoints with each product catagory\n",
    "top_categories_pc1 = train_data.groupBy(\"Product_Category_1\").agg(F.count(\"Product_Category_1\").alias(\"PC_1\"))\n",
    "\n",
    "# Top catagories in the dataset\n",
    "top_categories_pc1.orderBy(\"PC_1\", ascending=False).show(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "fbe704c5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------------+-----+\n",
      "|Product_Category_2| PC_2|\n",
      "+------------------+-----+\n",
      "|                 8|64088|\n",
      "|                14|55108|\n",
      "|                 2|49217|\n",
      "|                16|43255|\n",
      "|                15|37855|\n",
      "|                 5|26235|\n",
      "|                 4|25677|\n",
      "|                 6|16466|\n",
      "|                11|14134|\n",
      "|                17|13320|\n",
      "|                13|10531|\n",
      "|                 9| 5693|\n",
      "|                12| 5528|\n",
      "|                10| 3043|\n",
      "|                 3| 2884|\n",
      "|                18| 2770|\n",
      "|                 7|  626|\n",
      "|              null|    0|\n",
      "+------------------+-----+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Checking distribution of purchases across catagories\n",
    "\n",
    "# number of datapoints with each product catagory\n",
    "top_categories_pc2 = train_data.groupBy(\"Product_Category_2\").agg(F.count(\"Product_Category_2\").alias(\"PC_2\"))\n",
    "\n",
    "# Top catagories in the dataset\n",
    "top_categories_pc2.orderBy(\"PC_2\", ascending=False).show(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0e5e4a72",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------------+-----+\n",
      "|Product_Category_3| PC_3|\n",
      "+------------------+-----+\n",
      "|                16|32636|\n",
      "|                15|28013|\n",
      "|                14|18428|\n",
      "|                17|16702|\n",
      "|                 5|16658|\n",
      "|                 8|12562|\n",
      "|                 9|11579|\n",
      "|                12| 9246|\n",
      "|                13| 5459|\n",
      "|                 6| 4890|\n",
      "|                18| 4629|\n",
      "|                 4| 1875|\n",
      "|                11| 1805|\n",
      "|                10| 1726|\n",
      "|                 3|  613|\n",
      "|              null|    0|\n",
      "+------------------+-----+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Checking distribution of purchases across catagories\n",
    "\n",
    "# number of datapoints with each product catagory\n",
    "top_categories_pc3 = train_data.groupBy(\"Product_Category_3\").agg(F.count(\"Product_Category_3\").alias(\"PC_3\"))\n",
    "\n",
    "# Top catagories in the dataset\n",
    "top_categories_pc3.orderBy(\"PC_3\", ascending=False).show(20)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d1a8dfa",
   "metadata": {},
   "source": [
    "#### Column Marital Status"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "cb965520",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------+--------------+\n",
      "|Marital_Status|marital_Status|\n",
      "+--------------+--------------+\n",
      "|             1|        225337|\n",
      "|             0|        324731|\n",
      "+--------------+--------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Checking distribution of the\n",
    "marital_status= train_data.groupBy(\"Marital_Status\").agg(F.count(\"Marital_Status\").alias(\"marital_Status\"))\n",
    "marital_status.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "70c13f14",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Converting it to categorical variable type, since it is currently an integer\n",
    "from pyspark.sql.types import StringType\n",
    "\n",
    "# Type cast the target variable 'Marital_Status' to string type\n",
    "train_data = train_data.withColumn(\"Marital_Status\", F.col(\"Marital_Status\").cast(StringType()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "13489021",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Extending to test data set\n",
    "test_data = test_data.withColumn(\"Marital_Status\", F.col(\"Marital_Status\").cast(StringType()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f15e511e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#User id column  doesnt add value to our prediction therefore we don't include it in our training"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0febbaf8",
   "metadata": {},
   "source": [
    "#### Column Gender"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "fda3b3c9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------+------------+\n",
      "|Gender|gender_count|\n",
      "+------+------------+\n",
      "|     F|      135809|\n",
      "|     M|      414259|\n",
      "+------+------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# exploring the gender column-\n",
    "top_gender = train_data.groupBy(\"Gender\").agg(F.count(\"Gender\").alias(\"gender_count\"))\n",
    "top_gender.show(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9a2b0a7",
   "metadata": {},
   "source": [
    "#### Column Stay_In_Current_City_Years"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "79767960",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Exploring column Stay_In_Current_City_Years\n",
    "stay_df = train_data.select(\"Stay_In_Current_City_Years\")\n",
    "stay_pd = stay_df.toPandas()\n",
    "# Set the style of the plot\n",
    "sns.set(style=\"whitegrid\")\n",
    "\n",
    "# Create a figure and axis\n",
    "plt.figure(figsize=(10, 6))\n",
    "\n",
    "# Plot the data\n",
    "sns.histplot(stay_pd[\"Stay_In_Current_City_Years\"], kde=True)\n",
    "\n",
    "# Add title and labels\n",
    "plt.title(\"Distribution of Stay_In_Current_City_Years\")\n",
    "plt.xlabel(\"Stay_In_Current_City_Years\")\n",
    "plt.ylabel(\"Frequency\")\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "1d999271",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------------+------+\n",
      "|Stay_In_Current_City_Years| count|\n",
      "+--------------------------+------+\n",
      "|                         0| 74398|\n",
      "|                         1|193821|\n",
      "|                         2|101838|\n",
      "|                         3| 95285|\n",
      "|                        4+| 84726|\n",
      "+--------------------------+------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#looking into the 0 values\n",
    "# Count unique values in Stay_In_City_Years\n",
    "Stay_In_Current_City_Years = train_data.groupBy(\"Stay_In_Current_City_Years\").count().orderBy(\"Stay_In_Current_City_Years\")\n",
    "\n",
    "# Show the result\n",
    "Stay_In_Current_City_Years.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "cedb3851",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Since there is a significant number for each category we will keep all categories"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5ee64e8a",
   "metadata": {},
   "source": [
    "#### Column Occupation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "eb8e7337",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Data type is :- Occupation: integer (nullable = true). Since occupation is a categorical variable we will transform it into one ."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "efa861ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Type cast the target variable 'Marital_Status' to string type\n",
    "train_data = train_data.withColumn(\"Occupation\", F.col(\"Occupation\").cast(StringType()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "c92d4153",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Type cast the target variable 'Marital_Status' to string type- test data set\n",
    "test_data = test_data.withColumn(\"Occupation\", F.col(\"Occupation\").cast(StringType()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "b5de31e8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 720x432 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Exploring column Occupation\n",
    "occupation_df = train_data.select(\"Occupation\")\n",
    "occupation_pd = occupation_df.toPandas()\n",
    "# Set the style of the plot\n",
    "sns.set(style=\"whitegrid\")\n",
    "\n",
    "# Create a figure and axis\n",
    "plt.figure(figsize=(10, 6))\n",
    "\n",
    "# Calculate the frequency of each occupation\n",
    "occupation_counts = occupation_pd['Occupation'].value_counts().reset_index()\n",
    "occupation_counts.columns = ['Occupation', 'Frequency']\n",
    "\n",
    "# Sort the data by frequency in descending order\n",
    "occupation_counts = occupation_counts.sort_values(by='Frequency', ascending=False)\n",
    "\n",
    "# Set the style of the plot\n",
    "sns.set(style=\"whitegrid\")\n",
    "\n",
    "# Create a figure and axis\n",
    "plt.figure(figsize=(10, 6))\n",
    "\n",
    "# Plot the data\n",
    "sns.barplot(x='Occupation', y='Frequency', data=occupation_counts)\n",
    "\n",
    "# Add title and labels\n",
    "plt.title(\"Distribution of Occupation\")\n",
    "plt.xlabel(\"Occupation\")\n",
    "plt.ylabel(\"Frequency\")\n",
    "\n",
    "# Rotate x labels for better readability\n",
    "plt.xticks(rotation=90)\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "160f719f",
   "metadata": {},
   "source": [
    "#### Column Age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "26f628fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Exploring column Age\n",
    "age_df = train_data.select(\"Age\")\n",
    "age_pd = age_df.toPandas()\n",
    "# Set the style of the plot\n",
    "sns.set(style=\"whitegrid\")\n",
    "\n",
    "# Create a figure and axis\n",
    "plt.figure(figsize=(10, 6))\n",
    "\n",
    "# Plot the data\n",
    "sns.histplot(age_pd[\"Age\"], kde=True)\n",
    "\n",
    "# Add title and labels\n",
    "plt.title(\"Distribution of Age\")\n",
    "plt.xlabel(\"Age\")\n",
    "plt.ylabel(\"Frequency\")\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ab63cef",
   "metadata": {},
   "source": [
    "#### Column Product_ID"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "007aa9f5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Exploring column Product Id\n",
    "product_id_df = train_data.select(\"Product_ID\")\n",
    "product_id_pd = product_id_df.toPandas()\n",
    "# Set the style of the plot\n",
    "sns.set(style=\"whitegrid\")\n",
    "\n",
    "# Create a figure and axis\n",
    "plt.figure(figsize=(10, 6))\n",
    "\n",
    "# Plot the data\n",
    "sns.histplot(product_id_pd[\"Product_ID\"], kde=True)\n",
    "\n",
    "# Add title and labels\n",
    "plt.title(\"Distribution of Product_ID\")\n",
    "plt.xlabel(\"Product_ID\")\n",
    "plt.ylabel(\"Frequency\")\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b6b73b6b",
   "metadata": {},
   "source": [
    "Product ID though high very high in frequency can serve as an important parameter in identifying products for certain skill sets. We will keep it for now."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74b970ed",
   "metadata": {},
   "source": [
    "#### Column City_Category"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "cdf482e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Exploring column Product Id\n",
    "city_df = train_data.select(\"City_Category\")\n",
    "city_pd = city_df.toPandas()\n",
    "# Set the style of the plot\n",
    "sns.set(style=\"whitegrid\")\n",
    "\n",
    "# Create a figure and axis\n",
    "plt.figure(figsize=(10, 6))\n",
    "\n",
    "# Plot the data\n",
    "sns.histplot(city_pd[\"City_Category\"], kde=True)\n",
    "\n",
    "# Add title and labels\n",
    "plt.title(\"Distribution of City_Category\")\n",
    "plt.xlabel(\"City_Category\")\n",
    "plt.ylabel(\"Frequency\")\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "096eeadc",
   "metadata": {},
   "source": [
    "## `BIVARIATE ANALYSIS`"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "700ea830",
   "metadata": {},
   "source": [
    "#### Number of Purchases of each product category."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "f92761ff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------------+------------------------+---------------+\n",
      "|Product_Category_1|product_category_1_count|Total_Purchases|\n",
      "+------------------+------------------------+---------------+\n",
      "|                 7|                    3721|       60896731|\n",
      "|                15|                    6290|       92969042|\n",
      "|                11|                   24287|      113791115|\n",
      "|                 3|                   20213|      204084713|\n",
      "|                 8|                  113925|      854318799|\n",
      "|                16|                    9828|      145120612|\n",
      "|                 5|                  150933|      941835229|\n",
      "|                18|                    3125|        9290201|\n",
      "|                17|                     578|        5878699|\n",
      "|                 6|                   20466|      324150302|\n",
      "|                19|                    1603|          59378|\n",
      "|                 9|                     410|        6370324|\n",
      "|                 1|                  140378|     1910013754|\n",
      "|                20|                    2550|         944727|\n",
      "|                10|                    5125|      100837301|\n",
      "|                 4|                   11753|       27380488|\n",
      "|                12|                    3947|        5331844|\n",
      "|                13|                    5549|        4008601|\n",
      "|                14|                    1523|       20014696|\n",
      "|                 2|                   23864|      268516186|\n",
      "+------------------+------------------------+---------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Product_Category_1\n",
    "top_product_1_purchase = train_data.groupBy(\"Product_Category_1\").agg(F.count(\"Product_Category_1\").alias(\"product_category_1_count\"),F.sum(\"Purchase\").alias(\"Total_Purchases\"))\n",
    "\n",
    "# Show the result\n",
    "top_product_1_purchase.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "adca513b",
   "metadata": {},
   "outputs": [],
   "source": [
    "top_product_1_purchase= top_product_1_purchase.withColumn(\"percentage_of_purchase1\", (top_product_1_purchase[\"Total_Purchases\"]/top_product_1_purchase[\"product_category_1_count\"])*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "84968d30",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product_Category_1</th>\n",
       "      <th>product_category_1_count</th>\n",
       "      <th>Total_Purchases</th>\n",
       "      <th>percentage_of_purchase1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10</td>\n",
       "      <td>5125</td>\n",
       "      <td>100837301</td>\n",
       "      <td>1.967557e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7</td>\n",
       "      <td>3721</td>\n",
       "      <td>60896731</td>\n",
       "      <td>1.636569e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6</td>\n",
       "      <td>20466</td>\n",
       "      <td>324150302</td>\n",
       "      <td>1.583848e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9</td>\n",
       "      <td>410</td>\n",
       "      <td>6370324</td>\n",
       "      <td>1.553738e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>15</td>\n",
       "      <td>6290</td>\n",
       "      <td>92969042</td>\n",
       "      <td>1.478045e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>16</td>\n",
       "      <td>9828</td>\n",
       "      <td>145120612</td>\n",
       "      <td>1.476604e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1</td>\n",
       "      <td>140378</td>\n",
       "      <td>1910013754</td>\n",
       "      <td>1.360622e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>14</td>\n",
       "      <td>1523</td>\n",
       "      <td>20014696</td>\n",
       "      <td>1.314163e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2</td>\n",
       "      <td>23864</td>\n",
       "      <td>268516186</td>\n",
       "      <td>1.125194e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>17</td>\n",
       "      <td>578</td>\n",
       "      <td>5878699</td>\n",
       "      <td>1.017076e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>3</td>\n",
       "      <td>20213</td>\n",
       "      <td>204084713</td>\n",
       "      <td>1.009671e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>8</td>\n",
       "      <td>113925</td>\n",
       "      <td>854318799</td>\n",
       "      <td>7.498958e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>5</td>\n",
       "      <td>150933</td>\n",
       "      <td>941835229</td>\n",
       "      <td>6.240088e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>11</td>\n",
       "      <td>24287</td>\n",
       "      <td>113791115</td>\n",
       "      <td>4.685268e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>18</td>\n",
       "      <td>3125</td>\n",
       "      <td>9290201</td>\n",
       "      <td>2.972864e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>4</td>\n",
       "      <td>11753</td>\n",
       "      <td>27380488</td>\n",
       "      <td>2.329659e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>12</td>\n",
       "      <td>3947</td>\n",
       "      <td>5331844</td>\n",
       "      <td>1.350860e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>13</td>\n",
       "      <td>5549</td>\n",
       "      <td>4008601</td>\n",
       "      <td>7.224006e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>20</td>\n",
       "      <td>2550</td>\n",
       "      <td>944727</td>\n",
       "      <td>3.704812e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>19</td>\n",
       "      <td>1603</td>\n",
       "      <td>59378</td>\n",
       "      <td>3.704180e+03</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Product_Category_1  product_category_1_count  Total_Purchases  \\\n",
       "0                  10                      5125        100837301   \n",
       "1                   7                      3721         60896731   \n",
       "2                   6                     20466        324150302   \n",
       "3                   9                       410          6370324   \n",
       "4                  15                      6290         92969042   \n",
       "5                  16                      9828        145120612   \n",
       "6                   1                    140378       1910013754   \n",
       "7                  14                      1523         20014696   \n",
       "8                   2                     23864        268516186   \n",
       "9                  17                       578          5878699   \n",
       "10                  3                     20213        204084713   \n",
       "11                  8                    113925        854318799   \n",
       "12                  5                    150933        941835229   \n",
       "13                 11                     24287        113791115   \n",
       "14                 18                      3125          9290201   \n",
       "15                  4                     11753         27380488   \n",
       "16                 12                      3947          5331844   \n",
       "17                 13                      5549          4008601   \n",
       "18                 20                      2550           944727   \n",
       "19                 19                      1603            59378   \n",
       "\n",
       "    percentage_of_purchase1  \n",
       "0              1.967557e+06  \n",
       "1              1.636569e+06  \n",
       "2              1.583848e+06  \n",
       "3              1.553738e+06  \n",
       "4              1.478045e+06  \n",
       "5              1.476604e+06  \n",
       "6              1.360622e+06  \n",
       "7              1.314163e+06  \n",
       "8              1.125194e+06  \n",
       "9              1.017076e+06  \n",
       "10             1.009671e+06  \n",
       "11             7.498958e+05  \n",
       "12             6.240088e+05  \n",
       "13             4.685268e+05  \n",
       "14             2.972864e+05  \n",
       "15             2.329659e+05  \n",
       "16             1.350860e+05  \n",
       "17             7.224006e+04  \n",
       "18             3.704812e+04  \n",
       "19             3.704180e+03  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Sort the dataframe by percentage of purchase in descending order\n",
    "top_product_1_purchase= top_product_1_purchase.orderBy(\"percentage_of_purchase1\", ascending = False).toPandas()\n",
    "top_product_1_purchase"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "0a07d241",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# bar plot of top categories\n",
    "plt.figure(figsize=(15,5))\n",
    "plt.xticks(rotation=45)\n",
    "plt.title(\"purchase percentage of top 20 countries\")\n",
    "plt.bar(top_product_1_purchase[\"Product_Category_1\"], top_product_1_purchase[\"percentage_of_purchase1\"]);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "ee84b3ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "#train_data = train_data.join(top_product_1_purchase, on=\"Product_Category_1\")\n",
    "#test_data = test_data.join(top_product_1_purchase, on=\"Product_Category_1\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "654b4e98",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------------+------------------------+----------------+\n",
      "|Product_Category_2|product_category_2_count|Total_Purchases2|\n",
      "+------------------+------------------------+----------------+\n",
      "|                 7|                     626|         4309812|\n",
      "|                15|                   37855|       392067176|\n",
      "|                11|                   14134|       126366165|\n",
      "|                 3|                    2884|        32402777|\n",
      "|                 8|                   64088|       658392656|\n",
      "|                16|                   43255|       445339722|\n",
      "|              null|                       0|      1305531230|\n",
      "|                 5|                   26235|       236844899|\n",
      "|                18|                    2770|        25906260|\n",
      "|                17|                   13320|       125495400|\n",
      "|                 6|                   16466|       189417477|\n",
      "|                 9|                    5693|        41428000|\n",
      "|                10|                    3043|        47619084|\n",
      "|                 4|                   25677|       262295485|\n",
      "|                12|                    5528|        38560412|\n",
      "|                13|                   10531|       101975384|\n",
      "|                14|                   55108|       391556939|\n",
      "|                 2|                   49217|       670303864|\n",
      "+------------------+------------------------+----------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Product_Category_2\n",
    "top_product_2_purchase = train_data.groupBy(\"Product_Category_2\").agg(F.count(\"Product_Category_2\").alias(\"product_category_2_count\"),F.sum(\"Purchase\").alias(\"Total_Purchases2\"))\n",
    "\n",
    "# Show the result\n",
    "top_product_2_purchase.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "f49fc801",
   "metadata": {},
   "outputs": [],
   "source": [
    "top_product_2_purchase= top_product_2_purchase.withColumn(\"percentage_of_purchase2\", (top_product_2_purchase[\"Total_Purchases2\"]/top_product_2_purchase[\"product_category_2_count\"])*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "da42dee3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product_Category_2</th>\n",
       "      <th>product_category_2_count</th>\n",
       "      <th>Total_Purchases2</th>\n",
       "      <th>percentage_of_purchase2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10</td>\n",
       "      <td>3043</td>\n",
       "      <td>47619084</td>\n",
       "      <td>1.564873e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>49217</td>\n",
       "      <td>670303864</td>\n",
       "      <td>1.361936e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6</td>\n",
       "      <td>16466</td>\n",
       "      <td>189417477</td>\n",
       "      <td>1.150355e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2884</td>\n",
       "      <td>32402777</td>\n",
       "      <td>1.123536e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>15</td>\n",
       "      <td>37855</td>\n",
       "      <td>392067176</td>\n",
       "      <td>1.035708e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>16</td>\n",
       "      <td>43255</td>\n",
       "      <td>445339722</td>\n",
       "      <td>1.029568e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>8</td>\n",
       "      <td>64088</td>\n",
       "      <td>658392656</td>\n",
       "      <td>1.027326e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>4</td>\n",
       "      <td>25677</td>\n",
       "      <td>262295485</td>\n",
       "      <td>1.021519e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>13</td>\n",
       "      <td>10531</td>\n",
       "      <td>101975384</td>\n",
       "      <td>9.683352e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>17</td>\n",
       "      <td>13320</td>\n",
       "      <td>125495400</td>\n",
       "      <td>9.421577e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>18</td>\n",
       "      <td>2770</td>\n",
       "      <td>25906260</td>\n",
       "      <td>9.352440e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>5</td>\n",
       "      <td>26235</td>\n",
       "      <td>236844899</td>\n",
       "      <td>9.027822e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>11</td>\n",
       "      <td>14134</td>\n",
       "      <td>126366165</td>\n",
       "      <td>8.940581e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>9</td>\n",
       "      <td>5693</td>\n",
       "      <td>41428000</td>\n",
       "      <td>7.277007e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>14</td>\n",
       "      <td>55108</td>\n",
       "      <td>391556939</td>\n",
       "      <td>7.105265e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>12</td>\n",
       "      <td>5528</td>\n",
       "      <td>38560412</td>\n",
       "      <td>6.975473e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>7</td>\n",
       "      <td>626</td>\n",
       "      <td>4309812</td>\n",
       "      <td>6.884684e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "      <td>1305531230</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Product_Category_2  product_category_2_count  Total_Purchases2  \\\n",
       "0                  10                      3043          47619084   \n",
       "1                   2                     49217         670303864   \n",
       "2                   6                     16466         189417477   \n",
       "3                   3                      2884          32402777   \n",
       "4                  15                     37855         392067176   \n",
       "5                  16                     43255         445339722   \n",
       "6                   8                     64088         658392656   \n",
       "7                   4                     25677         262295485   \n",
       "8                  13                     10531         101975384   \n",
       "9                  17                     13320         125495400   \n",
       "10                 18                      2770          25906260   \n",
       "11                  5                     26235         236844899   \n",
       "12                 11                     14134         126366165   \n",
       "13                  9                      5693          41428000   \n",
       "14                 14                     55108         391556939   \n",
       "15                 12                      5528          38560412   \n",
       "16                  7                       626           4309812   \n",
       "17               None                         0        1305531230   \n",
       "\n",
       "    percentage_of_purchase2  \n",
       "0              1.564873e+06  \n",
       "1              1.361936e+06  \n",
       "2              1.150355e+06  \n",
       "3              1.123536e+06  \n",
       "4              1.035708e+06  \n",
       "5              1.029568e+06  \n",
       "6              1.027326e+06  \n",
       "7              1.021519e+06  \n",
       "8              9.683352e+05  \n",
       "9              9.421577e+05  \n",
       "10             9.352440e+05  \n",
       "11             9.027822e+05  \n",
       "12             8.940581e+05  \n",
       "13             7.277007e+05  \n",
       "14             7.105265e+05  \n",
       "15             6.975473e+05  \n",
       "16             6.884684e+05  \n",
       "17                      NaN  "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Sort the dataframe by percentage of purchases in descending order\n",
    "top_product_2_purchase= top_product_2_purchase.orderBy(\"percentage_of_purchase2\", ascending = False).toPandas()\n",
    "top_product_2_purchase"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "724a6f23",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Filter out None values in Product_Category_2\n",
    "filtered_train_data = train_data.filter(train_data.Product_Category_2.isNotNull())\n",
    "\n",
    "# Check the number of purchases per product category in Product_Category_2\n",
    "top_product_2_purchase = filtered_train_data.groupBy(\"Product_Category_2\").agg(F.sum(\"Purchase\").alias(\"Total_Purchases\"))\n",
    "\n",
    "# Convert to Pandas DataFrame\n",
    "top_product_2_purchase_pd = top_product_2_purchase.toPandas()\n",
    "\n",
    "# Calculate the percentage of purchases\n",
    "total_purchases = top_product_2_purchase_pd[\"Total_Purchases\"].sum()\n",
    "top_product_2_purchase_pd[\"percentage_of_purchase2\"] = (top_product_2_purchase_pd[\"Total_Purchases\"] / total_purchases) * 100\n",
    "\n",
    "# Plot the bar chart\n",
    "plt.figure(figsize=(15, 5))\n",
    "plt.xticks(rotation=45)\n",
    "plt.title(\"Purchase Percentage of Top Product Categories 2\")\n",
    "plt.bar(top_product_2_purchase_pd[\"Product_Category_2\"].astype(str), top_product_2_purchase_pd[\"percentage_of_purchase2\"])\n",
    "plt.xlabel(\"Product Category 2\")\n",
    "plt.ylabel(\"Percentage of Purchase\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "bcb6c8df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------------+------------------------+----------------+\n",
      "|Product_Category_3|product_category_3_count|Total_Purchases3|\n",
      "+------------------+------------------------+----------------+\n",
      "|                15|                   28013|       345662769|\n",
      "|                11|                    1805|        21825045|\n",
      "|                 3|                     613|         8545034|\n",
      "|                 8|                   12562|       163619031|\n",
      "|                16|                   32636|       391040983|\n",
      "|              null|                       0|      3150994343|\n",
      "|                 5|                   16658|       201858094|\n",
      "|                18|                    4629|        50891137|\n",
      "|                17|                   16702|       196581588|\n",
      "|                 6|                    4890|        64520181|\n",
      "|                 9|                   11579|       120788622|\n",
      "|                10|                    1726|        23311034|\n",
      "|                 4|                    1875|        18364475|\n",
      "|                12|                    9246|        80583631|\n",
      "|                13|                    5459|        71977563|\n",
      "|                14|                   18428|       185249212|\n",
      "+------------------+------------------------+----------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Product_Category_3\n",
    "top_product_3_purchase = train_data.groupBy(\"Product_Category_3\").agg(F.count(\"Product_Category_3\").alias(\"product_category_3_count\"),F.sum(\"Purchase\").alias(\"Total_Purchases3\"))\n",
    "\n",
    "# Show the result\n",
    "top_product_3_purchase.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "1f2736a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data = train_data.join(top_product_3_purchase, on=\"Product_Category_3\")\n",
    "test_data = test_data.join(top_product_3_purchase, on=\"Product_Category_3\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "fbbc0225",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product_Category_3</th>\n",
       "      <th>product_category_3_count</th>\n",
       "      <th>Total_Purchases3</th>\n",
       "      <th>percentage_of_purchase3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>613</td>\n",
       "      <td>8545034</td>\n",
       "      <td>1.393970e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10</td>\n",
       "      <td>1726</td>\n",
       "      <td>23311034</td>\n",
       "      <td>1.350581e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6</td>\n",
       "      <td>4890</td>\n",
       "      <td>64520181</td>\n",
       "      <td>1.319431e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>13</td>\n",
       "      <td>5459</td>\n",
       "      <td>71977563</td>\n",
       "      <td>1.318512e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>8</td>\n",
       "      <td>12562</td>\n",
       "      <td>163619031</td>\n",
       "      <td>1.302492e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>15</td>\n",
       "      <td>28013</td>\n",
       "      <td>345662769</td>\n",
       "      <td>1.233937e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>5</td>\n",
       "      <td>16658</td>\n",
       "      <td>201858094</td>\n",
       "      <td>1.211779e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>11</td>\n",
       "      <td>1805</td>\n",
       "      <td>21825045</td>\n",
       "      <td>1.209144e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>16</td>\n",
       "      <td>32636</td>\n",
       "      <td>391040983</td>\n",
       "      <td>1.198189e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>17</td>\n",
       "      <td>16702</td>\n",
       "      <td>196581588</td>\n",
       "      <td>1.176994e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>18</td>\n",
       "      <td>4629</td>\n",
       "      <td>50891137</td>\n",
       "      <td>1.099398e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>9</td>\n",
       "      <td>11579</td>\n",
       "      <td>120788622</td>\n",
       "      <td>1.043170e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>14</td>\n",
       "      <td>18428</td>\n",
       "      <td>185249212</td>\n",
       "      <td>1.005259e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>4</td>\n",
       "      <td>1875</td>\n",
       "      <td>18364475</td>\n",
       "      <td>9.794387e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>12</td>\n",
       "      <td>9246</td>\n",
       "      <td>80583631</td>\n",
       "      <td>8.715513e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>None</td>\n",
       "      <td>0</td>\n",
       "      <td>3150994343</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Product_Category_3  product_category_3_count  Total_Purchases3  \\\n",
       "0                   3                       613           8545034   \n",
       "1                  10                      1726          23311034   \n",
       "2                   6                      4890          64520181   \n",
       "3                  13                      5459          71977563   \n",
       "4                   8                     12562         163619031   \n",
       "5                  15                     28013         345662769   \n",
       "6                   5                     16658         201858094   \n",
       "7                  11                      1805          21825045   \n",
       "8                  16                     32636         391040983   \n",
       "9                  17                     16702         196581588   \n",
       "10                 18                      4629          50891137   \n",
       "11                  9                     11579         120788622   \n",
       "12                 14                     18428         185249212   \n",
       "13                  4                      1875          18364475   \n",
       "14                 12                      9246          80583631   \n",
       "15               None                         0        3150994343   \n",
       "\n",
       "    percentage_of_purchase3  \n",
       "0              1.393970e+06  \n",
       "1              1.350581e+06  \n",
       "2              1.319431e+06  \n",
       "3              1.318512e+06  \n",
       "4              1.302492e+06  \n",
       "5              1.233937e+06  \n",
       "6              1.211779e+06  \n",
       "7              1.209144e+06  \n",
       "8              1.198189e+06  \n",
       "9              1.176994e+06  \n",
       "10             1.099398e+06  \n",
       "11             1.043170e+06  \n",
       "12             1.005259e+06  \n",
       "13             9.794387e+05  \n",
       "14             8.715513e+05  \n",
       "15                      NaN  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "top_product_3_purchase= top_product_3_purchase.withColumn(\"percentage_of_purchase3\", (top_product_3_purchase[\"Total_Purchases3\"]/top_product_3_purchase[\"product_category_3_count\"])*100)\n",
    "# Sort the dataframe by percentage of purchases in descending order\n",
    "top_product_3_purchase= top_product_3_purchase.orderBy(\"percentage_of_purchase3\", ascending = False).toPandas()\n",
    "top_product_3_purchase"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "12bcedb2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Filter out None values in Product_Category_3\n",
    "filtered_train_data = train_data.filter(train_data.Product_Category_3.isNotNull())\n",
    "\n",
    "# Calculate the total purchases for each Product_Category_3\n",
    "top_product_3_purchase = filtered_train_data.groupBy(\"Product_Category_3\").agg(\n",
    "    F.count(\"Product_Category_3\").alias(\"product_category_3_count\"),\n",
    "    F.sum(\"Purchase\").alias(\"Total_Purchases3\")\n",
    ")\n",
    "\n",
    "# Convert to Pandas DataFrame for plotting\n",
    "top_product_3_purchase_pd = top_product_3_purchase.toPandas()\n",
    "\n",
    "# Sort the DataFrame by Total_Purchases3 in descending order\n",
    "top_product_3_purchase_pd = top_product_3_purchase_pd.sort_values(by=\"Total_Purchases3\", ascending=False)\n",
    "\n",
    "# Plot the data as a bar chart\n",
    "plt.figure(figsize=(15, 5))\n",
    "plt.bar(top_product_3_purchase_pd[\"Product_Category_3\"].astype(str), top_product_3_purchase_pd[\"Total_Purchases3\"])\n",
    "plt.xticks(rotation=45)\n",
    "plt.title(\"Total Purchases by Product Category 3\")\n",
    "plt.xlabel(\"Product Category 3\")\n",
    "plt.ylabel(\"Total Purchases\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d54ce37",
   "metadata": {},
   "source": [
    "#### Number of Purchases Per Age group"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "dc61fc9d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----+-----+---------------+\n",
      "|  Age|  age|Purchase_by_age|\n",
      "+-----+-----+---------------+\n",
      "|26-35|66942|      777347110|\n",
      "|36-45|33285|      390411894|\n",
      "|18-25|31316|      362666166|\n",
      "|46-50|13374|      155994042|\n",
      "|51-55|11166|      134388441|\n",
      "|  55+| 5865|       69567842|\n",
      "| 0-17| 4873|       54442904|\n",
      "+-----+-----+---------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# number of purchases with each age group\n",
    "top_purchases_with_age = train_data.groupBy(\"Age\").agg(F.count(\"Age\").alias(\"age\"),\n",
    "                                                                       F.sum(\"Purchase\").alias(\"Purchase_by_age\"))\n",
    "# Sort the results by total purchases in descending order\n",
    "sorted_top_purchases_with_age = top_purchases_with_age.orderBy(\"Purchase_by_age\", ascending=False)\n",
    "\n",
    "# Show the result\n",
    "sorted_top_purchases_with_age.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd76171a",
   "metadata": {},
   "source": [
    "#### Number of Purchases Per Occupation group"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "343526ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "# number of purchases per occupation group\n",
    "top_purchases_with_occupation = train_data.groupBy(\"Occupation\").agg(F.count(\"Occupation\").alias(\"occupation\"),\n",
    "                                                                       F.sum(\"Purchase\").alias(\"Purchase_occupation\"))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "dabe7567",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Convert to Pandas DataFrame for plotting\n",
    "top_purchases_with_occupation_pd = top_purchases_with_occupation.toPandas()\n",
    "\n",
    "# Sort the DataFrame by Purchase_occupation in descending order\n",
    "top_purchases_with_occupation_pd = top_purchases_with_occupation_pd.sort_values(by=\"Purchase_occupation\", ascending=False)\n",
    "\n",
    "# Plot the data as a bar chart\n",
    "plt.figure(figsize=(15, 5))\n",
    "plt.bar(top_purchases_with_occupation_pd[\"Occupation\"].astype(str), top_purchases_with_occupation_pd[\"Purchase_occupation\"])\n",
    "plt.xticks(rotation=45)\n",
    "plt.title(\"Total Purchases by Occupation\")\n",
    "plt.xlabel(\"Occupation\")\n",
    "plt.ylabel(\"Total Purchases\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "eee649a6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Product_Category_3',\n",
       " 'User_ID',\n",
       " 'Product_ID',\n",
       " 'Gender',\n",
       " 'Age',\n",
       " 'Occupation',\n",
       " 'City_Category',\n",
       " 'Stay_In_Current_City_Years',\n",
       " 'Marital_Status',\n",
       " 'Product_Category_1',\n",
       " 'Product_Category_2',\n",
       " 'Purchase',\n",
       " 'product_category_3_count',\n",
       " 'Total_Purchases3']"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cdd1059a",
   "metadata": {},
   "source": [
    "#### Occupation VS Age group"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "ce4cfa35",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Group by Occupation and Age, and calculate the count of purchases\n",
    "occupation_age_group = train_data.groupBy(\"Occupation\", \"Age\").agg(F.count(\"Purchase\").alias(\"Purchase_Count\"))\n",
    "\n",
    "# Convert to Pandas DataFrame for plotting\n",
    "occupation_age_group_pd = occupation_age_group.toPandas()\n",
    "\n",
    "# Plot the data as a bar chart\n",
    "plt.figure(figsize=(15, 8))\n",
    "sns.barplot(data=occupation_age_group_pd, x=\"Occupation\", y=\"Purchase_Count\", hue=\"Age\")\n",
    "plt.xticks(rotation=45)\n",
    "plt.title(\"Number of Purchases by Occupation and Age Group\")\n",
    "plt.xlabel(\"Occupation\")\n",
    "plt.ylabel(\"Purchase Count\")\n",
    "plt.legend(title=\"Age Group\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "893ac8d1",
   "metadata": {},
   "source": [
    "#### Number of Purchases Per Marital_Status group"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "f926413a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------+--------------+\n",
      "|Marital_status|Purchase_Count|\n",
      "+--------------+--------------+\n",
      "|             0|         99619|\n",
      "|             1|         67202|\n",
      "+--------------+--------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "top_purchase_per_marital_status = train_data.groupby(\"Marital_status\").agg(F.count(\"Purchase\").alias(\"Purchase_Count\"))\n",
    "top_purchase_per_marital_status.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c0475020",
   "metadata": {},
   "source": [
    "#### Number of Purchases Per City_Category"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "d4f8af56",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------------+--------------+\n",
      "|City_Category|Purchase_Count|\n",
      "+-------------+--------------+\n",
      "|            B|         69243|\n",
      "|            C|         56059|\n",
      "|            A|         41519|\n",
      "+-------------+--------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "top_purchase_per_City_Category = train_data.groupby(\"City_Category\").agg(F.count(\"Purchase\").alias(\"Purchase_Count\"))\n",
    "top_purchase_per_City_Category.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f414cc80",
   "metadata": {},
   "source": [
    "#### Number of Purchases Per Stay_In_Current_City_Years"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "581936c0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------------+--------------+\n",
      "|Stay_In_Current_City_Years|Purchase_Count|\n",
      "+--------------------------+--------------+\n",
      "|                         3|         29268|\n",
      "|                         0|         22389|\n",
      "|                        4+|         25362|\n",
      "|                         1|         58287|\n",
      "|                         2|         31515|\n",
      "+--------------------------+--------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "top_purchase_per_Stay_In_Current_City_Years = train_data.groupby(\"Stay_In_Current_City_Years\").agg(F.count(\"Purchase\").alias(\"Purchase_Count\"))\n",
    "top_purchase_per_Stay_In_Current_City_Years.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5b82ae6",
   "metadata": {},
   "source": [
    "####  Stay_In_Current_City_Years VS City_Category"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "69d9468b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------------+-------------+--------------+\n",
      "|Stay_In_Current_City_Years|City_Category|Purchase_Count|\n",
      "+--------------------------+-------------+--------------+\n",
      "|                         1|            B|         24904|\n",
      "|                         1|            C|         19612|\n",
      "|                         1|            A|         13771|\n",
      "|                         2|            B|         12883|\n",
      "|                         3|            B|         12786|\n",
      "|                         2|            C|         10786|\n",
      "|                        4+|            B|         10222|\n",
      "|                         3|            C|          9396|\n",
      "|                        4+|            C|          8956|\n",
      "|                         0|            B|          8448|\n",
      "|                         2|            A|          7846|\n",
      "|                         0|            C|          7309|\n",
      "|                         3|            A|          7086|\n",
      "|                         0|            A|          6632|\n",
      "|                        4+|            A|          6184|\n",
      "+--------------------------+-------------+--------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Group by Occupation and Age, and calculate the count of purchases\n",
    "stay_vs_city_group = train_data.groupBy(\"Stay_In_Current_City_Years\", \"City_Category\").agg(F.count(\"Purchase\").alias(\"Purchase_Count\"))\n",
    "# Sort by 'Stay_In_Current_City_Years' in descending order\n",
    "stay_vs_city_group_sorted = stay_vs_city_group.orderBy(\"Purchase_Count\", ascending=False)\n",
    "\n",
    "# Show the result\n",
    "stay_vs_city_group_sorted.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e1ccec4b",
   "metadata": {},
   "source": [
    "#### Number of Purchases Per Gender"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "4c11591f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  Gender  Total_Purchases_Gender  Percentage_Of_Total_Purchases\n",
      "0      M              1528099293                      78.572853\n",
      "1      F               416719106                      21.427147\n"
     ]
    }
   ],
   "source": [
    "# Group by 'Gender' and calculate the total purchases\n",
    "total_purchases_by_gender = train_data.groupBy(\"Gender\").agg(\n",
    "    F.sum(\"Purchase\").alias(\"Total_Purchases_Gender\")\n",
    ")\n",
    "\n",
    "# Calculate the overall total purchases\n",
    "overall_total_purchases = train_data.agg(F.sum(\"Purchase\").alias(\"Overall_Total_Purchases\")).collect()[0][\"Overall_Total_Purchases\"]\n",
    "\n",
    "# Calculate the percentage of total purchases for each gender\n",
    "percentage_purchases_by_gender = total_purchases_by_gender.withColumn(\n",
    "    \"Percentage_Of_Total_Purchases\",\n",
    "    (F.col(\"Total_Purchases_Gender\") / overall_total_purchases) * 100\n",
    ")\n",
    "\n",
    "# Sort by percentage in descending order\n",
    "percentage_purchases_by_gender_sorted = percentage_purchases_by_gender.orderBy(\"Percentage_Of_Total_Purchases\", ascending=False)\n",
    "\n",
    "# Convert to Pandas DataFrame for display\n",
    "percentage_purchases_by_gender_pd = percentage_purchases_by_gender_sorted.toPandas()\n",
    "\n",
    "# Display the result\n",
    "print(percentage_purchases_by_gender_pd)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06875c76",
   "metadata": {},
   "source": [
    "### Calculate average Purchase for each of the following columns:\n",
    "- Gender\n",
    "- Age\n",
    "- City_Category\n",
    "- Stay_In_Current_City_Years \n",
    "- Marital_Status"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "ec3806ac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------+------------------+\n",
      "|Marital_Status|  Average_Purchase|\n",
      "+--------------+------------------+\n",
      "|             0|11638.899065439324|\n",
      "|             1|11686.600294634089|\n",
      "+--------------+------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Average purchase per marital status-\n",
    "average_purchase_per_marital_status = train_data.groupBy(\"Marital_Status\").agg(F.avg(\"Purchase\").alias(\"Average_Purchase\"))\n",
    "average_purchase_per_marital_status.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "6d1d79fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-----+------------------+\n",
      "|  Age|  Average_Purchase|\n",
      "+-----+------------------+\n",
      "|18-25|11580.858538766126|\n",
      "|26-35|11612.248065489528|\n",
      "| 0-17| 11172.35871126616|\n",
      "|46-50|11663.978017048004|\n",
      "|51-55|12035.504298764105|\n",
      "|36-45|11729.364398377647|\n",
      "|  55+| 11861.52463768116|\n",
      "+-----+------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Group by Age and calculate the average purchase\n",
    "average_purchase_per_age = train_data.groupBy(\"Age\").agg(\n",
    "    F.avg(\"Purchase\").alias(\"Average_Purchase\"))\n",
    "\n",
    "# Show the result\n",
    "average_purchase_per_age.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "5875bd35",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+-------------+------------------+\n",
      "|City_Category|  Average_Purchase|\n",
      "+-------------+------------------+\n",
      "|            B|11488.090521785596|\n",
      "|            C| 12207.51699102731|\n",
      "|            A|11199.868782966834|\n",
      "+-------------+------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Group by City_Category and calculate the average purchase\n",
    "average_purchase_per_city = train_data.groupBy(\"City_Category\").agg(\n",
    "    F.avg(\"Purchase\").alias(\"Average_Purchase\"))\n",
    "average_purchase_per_city.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "db26b1f7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------------+------------------+\n",
      "|Stay_In_Current_City_Years|  Average_Purchase|\n",
      "+--------------------------+------------------+\n",
      "|                         3|11630.236333196664|\n",
      "|                         0|  11503.9256777882|\n",
      "|                        4+|11695.298438608943|\n",
      "|                         1|11652.926896220426|\n",
      "|                         2|11773.217229890528|\n",
      "+--------------------------+------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Group by Stay_In_Current_City_Years and calculate the average purchase\n",
    "average_purchase_per_stay = train_data.groupBy(\"Stay_In_Current_City_Years\").agg(\n",
    "    F.avg(\"Purchase\").alias(\"Average_Purchase\"))\n",
    "\n",
    "average_purchase_per_stay.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "1df3100e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------+------------------+\n",
      "|Gender|  Average_Purchase|\n",
      "+------+------------------+\n",
      "|     F|11084.723785710486|\n",
      "|     M|11824.922756080387|\n",
      "+------+------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Group by Gender and calculate the average purchase\n",
    "average_purchase_per_gender = train_data.groupBy(\"Gender\").agg(\n",
    "    F.avg(\"Purchase\").alias(\"Average_Purchase\")\n",
    ")\n",
    "\n",
    "# Show the result\n",
    "average_purchase_per_gender.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "33614b42",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+------------------+\n",
      "|  Average_Purchase|\n",
      "+------------------+\n",
      "|11658.114979528957|\n",
      "+------------------+\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Average Purchase amount?\n",
    "# Calculate the average of the 'Purchase' column\n",
    "average_purchase = train_data.agg(F.avg(\"Purchase\").alias(\"Average_Purchase\"))\n",
    "\n",
    "# Show the result\n",
    "average_purchase.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5fce4ae",
   "metadata": {},
   "source": [
    "### `Summary of Data Exploration`\n",
    "\n",
    "- The Gender M was responsible for 76% of the purchases\n",
    "- Top Stay_In_City contributors came from those who stayed for 1 year in all 3 city categories\n",
    "- Marital Status 0 was responsible for the maximum contribution to purchases\n",
    "- Maximum contributions to purchases were made by users int he age group 26-35\n",
    "- Occupation 0 was most popular among users of age group 26-35, while Occupation 4 was most popular for users in age group 18-25.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af447f6c",
   "metadata": {},
   "source": [
    "## `Pre-Processing`\n",
    "\n",
    "---\n",
    "\n",
    "- We will fill the Null Values.\n",
    "- We will do label-encoding the categorical variable.\n",
    "- We will do one-hot encoding the categorical variables.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "158665cc",
   "metadata": {},
   "source": [
    "#### `Fill Null Values`\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "8648bc9a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# fill null values in the train data\n",
    "train_data = train_data.fillna({\n",
    "            \"User_ID\":\"U\",\n",
    "            \"Product_ID\": \"U\",\n",
    "            \"Gender\":\"UI\",\n",
    "            \"Age\":0,\n",
    "            \"Occupation\":50,\n",
    "            \"City_Category\": \"UI\",\n",
    "            \"Stay_In_Current_City_Years\": 50,\n",
    "            \"Marital_Status\": \"U\",\n",
    "            \"Product_Category_1\" : 0,\n",
    "            \"Product_Category_2\": \"U\",\n",
    "            \"Product_Category_3\": \"U\",\n",
    "            \"Purchase\": 0})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "e05da1bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# fill null values in the test data\n",
    "test_data = test_data.fillna({\n",
    "            \"User_ID\":\"U\",\n",
    "            \"Product_ID\": \"U\",\n",
    "            \"Gender\":\"U\",\n",
    "            \"Age\":0,\n",
    "            \"Occupation\":50,\n",
    "            \"City_Category\": \"U\",\n",
    "            \"Stay_In_Current_City_Years\": 50,\n",
    "            \"Marital_Status\": \"\",\n",
    "            \"Product_Category_1\" : 0,\n",
    "            \"Product_Category_2\": \"U\",\n",
    "            \"Product_Category_3\": \"U\",\n",
    "            })"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d358b0bc",
   "metadata": {},
   "source": [
    "#### `Encoding Categorical Variables`\n",
    "\n",
    "Categorical values need to be encoded or converted to numeric form before inputting it to an ML model.\n",
    "\n",
    "Two ways of encoding categorical values:\n",
    "\n",
    "**Label Encoding**\n",
    "\n",
    "   > Assigning a unique integer to each of the categorical values\n",
    "   > Done using StringIndexer\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "**One Hot Encoding**\n",
    "\n",
    "   > New columns created for each of the unique value in categorical column. Values assigned 0 or 1 based on the presence of the data.\n",
    "   > Requires features to be label encoded first.\n",
    "   > Done using OneHotEncoderEstimator\n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "----\n",
    "\n",
    "We will do the following encoding of the categorical variables in this notebook:-\n",
    "\n",
    "\n",
    "**Label Encoding**\n",
    "- Age\n",
    "- Gender\n",
    "- Stay_In_Current_City_Years \n",
    "- City_Category\n",
    "\n",
    "**One Hot Encoding** \n",
    "- Gender\n",
    "- City_Category\n",
    "- Occupation\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "b2eb4838",
   "metadata": {},
   "outputs": [],
   "source": [
    "# importing some more libraries\n",
    "from pyspark.ml.feature import StringIndexer, OneHotEncoder"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "238662ee",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "#### `Transform the StringIndexer Objects`\n",
    "\n",
    "----"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5f6d0d6d",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Initialize the StringIndexer for the 'Age' column\n",
    "indexer_age = StringIndexer(inputCol=\"Age\", outputCol=\"Age_le\")\n",
    "# Fit and transform the data\n",
    "train_data_encoded = indexer_age.fit(train_data).transform(train_data)\n",
    "\n",
    "# For 'Gender'\n",
    "indexer_gender = StringIndexer(inputCol=\"Gender\", outputCol=\"Gender_le\")\n",
    "train_data_encoded = indexer_gender.fit(train_data_encoded).transform(train_data_encoded)\n",
    "\n",
    "# For 'Stay_In_Current_City_Years'\n",
    "indexer_stay = StringIndexer(inputCol=\"Stay_In_Current_City_Years\", outputCol=\"Stay_le\")\n",
    "train_data_encoded = indexer_stay.fit(train_data_encoded).transform(train_data_encoded)\n",
    "\n",
    "# For 'City_Category'\n",
    "indexer_city = StringIndexer(inputCol=\"City_Category\", outputCol=\"City_le\")\n",
    "train_data_encoded = indexer_city.fit(train_data_encoded).transform(train_data_encoded)\n",
    "\n",
    "# For 'Occupation'\n",
    "indexer_occupation = StringIndexer(inputCol=\"Occupation\", outputCol=\"Occupation_le\")\n",
    "train_data_encoded = indexer_occupation.fit(train_data_encoded).transform(train_data_encoded)\n",
    "\n",
    "\n",
    "#Fixing Product_category data types\n",
    "train_data = train_data.withColumn(\"Product_Category_1\", col(\"Product_Category_1\").cast(\"string\"))\n",
    "train_data = train_data.withColumn(\"Product_Category_2\", col(\"Product_Category_2\").cast(\"string\"))\n",
    "train_data = train_data.withColumn(\"Product_Category_3\", col(\"Product_Category_3\").cast(\"string\"))\n",
    "\n",
    "# Initialize StringIndexer for categorical columns\n",
    "indexer_product_cat1 = StringIndexer(inputCol=\"Product_Category_1\", outputCol=\"Product_Category_1_le\")\n",
    "indexer_product_cat2 = StringIndexer(inputCol=\"Product_Category_2\", outputCol=\"Product_Category_2_le\")\n",
    "indexer_product_cat3 = StringIndexer(inputCol=\"Product_Category_3\", outputCol=\"Product_Category_3_le\")\n",
    "\n",
    "train_data_encoded = indexer_product_cat1.fit(train_data_encoded).transform(train_data_encoded)\n",
    "train_data_encoded = indexer_product_cat2.fit(train_data_encoded).transform(train_data_encoded)\n",
    "train_data_encoded = indexer_product_cat3.fit(train_data_encoded).transform(train_data_encoded)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fff7bc82",
   "metadata": {},
   "source": [
    "----\n",
    "\n",
    "#### `Make the Transformation on the test data`\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "43a04372",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'indexer_age' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-62-d9ea4d9ea92b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtest_data_encoded\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindexer_age\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mtest_data_encoded\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindexer_gender\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_data_encoded\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_data_encoded\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mtest_data_encoded\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindexer_stay\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_data_encoded\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_data_encoded\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mtest_data_encoded\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindexer_city\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_data_encoded\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_data_encoded\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mtest_data_encoded\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mindexer_occupation\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_data_encoded\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_data_encoded\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'indexer_age' is not defined"
     ]
    }
   ],
   "source": [
    "test_data_encoded = indexer_age.fit(test_data).transform(test_data)\n",
    "test_data_encoded = indexer_gender.fit(test_data_encoded).transform(test_data_encoded)\n",
    "test_data_encoded = indexer_stay.fit(test_data_encoded).transform(test_data_encoded)\n",
    "test_data_encoded = indexer_city.fit(test_data_encoded).transform(test_data_encoded)\n",
    "test_data_encoded = indexer_occupation.fit(test_data_encoded).transform(test_data_encoded)\n",
    "test_data_encoded = indexer_product_cat1.fit(test_data_encoded).transform(test_data_encoded)\n",
    "test_data_encoded = indexer_product_cat2.fit(test_data_encoded).transform(test_data_encoded)\n",
    "test_data_encoded = indexer_product_cat3.fit(test_data_encoded).transform(test_data_encoded)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "26c09f41",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'train_data_encoded' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-63-edf681b710a6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# let's check the columns in the data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mtrain_data_encoded\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'train_data_encoded' is not defined"
     ]
    }
   ],
   "source": [
    "# let's check the columns in the data\n",
    "train_data_encoded.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "f402e2b9",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'test_data_encoded' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-64-986bd9d12e81>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mtest_data_encoded\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'test_data_encoded' is not defined"
     ]
    }
   ],
   "source": [
    "test_data_encoded.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dac3ce1f",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "### `ONE-HOT ENCODING`\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e904a3b",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "Next, we will create the object of the `OneHotEncoderEstimator` and pass the input and output columns list.\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c32c10bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "OHE_train = OneHotEncoder(inputCols=[\"Gender_le\", \"City_le\",\"Occupation_le\",\"Product_Category_1_le\",\"Product_Category_2_le\", \"Product_Category_3_le\"],                                                                                          \n",
    "                                  outputCols=[\"Gender_ohe\",\n",
    "                                              \"City_ohe\",\n",
    "                                              \"Occupation_ohe\",\n",
    "                                              \"Product_Category_1_ohe\",\n",
    "                                              \"Product_Category_2_ohe\",\n",
    "                                              \"Product_Category_3_ohe\"])\n",
    "                                           "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "653e1861",
   "metadata": {},
   "outputs": [],
   "source": [
    "# OHE object\n",
    "OHE_Obj = OHE_train.fit(train_data_encoded)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a7551d25",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Transform train data\n",
    "train_data_encoded = OHE_Obj.transform(train_data_encoded)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fd9631ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "# view the one hot encoded data\n",
    "train_data_encoded.select(\"Gender_ohe\",\"City_ohe\",\"Occupation_ohe\",\"Product_Category_1_ohe\",\"Product_Category_2_ohe\",\"Product_Category_3_ohe\").show()                                             "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "08dd3879",
   "metadata": {},
   "outputs": [],
   "source": [
    "# test data\n",
    "test_data_encoded = OHE_Obj.transform(test_data_encoded)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "811fefa7",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "\n",
    "## `MODEL BUILDING`\n",
    "\n",
    "Now, we have prepared the dataset and it is ready to be trained with Machine Learning models. This is a `Classification Problem`, so we will train the data on the following alogrithms.\n",
    "\n",
    " * **Linear Regression**\n",
    "\n",
    "\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ebd6235e",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "#### `VECTOR ASSEMBLER`\n",
    "\n",
    "- Before passing the data into the ML model, we need to convert the required features into a Vector. We can do this using a `VectorAssembler`.\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7ff821aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "## columns in the dataset\n",
    "train_data_encoded.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6e4b9df",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "#### `Define the VectorAssembler Object`\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "730f4fdd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import the library\n",
    "from pyspark.ml.feature import VectorAssembler\n",
    "\n",
    "# create feature vector\n",
    "feature_vector = VectorAssembler(inputCols= ['Product_ID',\n",
    "                                             'Age_le',\n",
    "                                             'Gender_ohe',\n",
    "                                             'Occupation_ohe',\n",
    "                                             'City_ohe',\n",
    "                                             'Product_Category_1',\n",
    "                                             'Product_Category_2',\n",
    "                                             'Product_Category_3'],\n",
    "                                outputCol= 'feature_vector')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b694fa9",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "`TRANSFORM THE FEATURE VECTOR`\n",
    "\n",
    "----"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1f076463",
   "metadata": {},
   "outputs": [],
   "source": [
    "# transform the feature vector\n",
    "train_data_encoded = feature_vector.transform(train_data_encoded)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8192097b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# we can see that the data type of the `feature_vector` is vector\n",
    "train_data_encoded.printSchema()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "065bb803",
   "metadata": {},
   "source": [
    "----\n",
    "\n",
    "#### `Make the transformation on test data.`\n",
    "\n",
    "----"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dfbf4f41",
   "metadata": {},
   "outputs": [],
   "source": [
    "# test data\n",
    "test_data_encoded = feature_vector.transform(test_data_encoded)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "05b09cb3",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "#### `LINEAR REGRESSION`\n",
    "\n",
    "First, we will train the model with the Logistic Regression and see the `AOC-ROC`.\n",
    "\n",
    "For that let's import some more libraries.\n",
    "\n",
    "----"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7a6fbc51",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark.ml import regression\n",
    "from pyspark.ml.regression import LinearRegression\n",
    "from pyspark.ml.regression import DecisionTreeRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d67139bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Initialize the Linear Regression model\n",
    "model_LR = LinearRegression(featuresCol='feature_vector', labelCol=\"Purchase\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "334fcf13",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fit the model to the training data\n",
    "lr_model = model_LR.fit(train_data_encoded)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "17dfd087",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Evaluate training data\n",
    "evaluator = RegressionEvaluator( labelCol=\"Purchase\", predictionCol=\"prediction\", metricName=\"rmse\")\n",
    "# Calculate the RMSE\n",
    "rmse = evaluator.evaluate(predictions)\n",
    "print(\"Root Mean Squared Error (RMSE) on test data = %g\" % rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "51badf59",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Evaluate training data\n",
    "evaluator = RegressionEvaluator( labelCol=\"Purchase\", predictionCol=\"prediction\", metricName=\"rmse\")\n",
    "evaluator.evaluate(model_LR.transform(train_data_encoded)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e2cd8a28",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Evaluate training data\n",
    "evaluator = RegressionEvaluator( labelCol=\"Purchase\", predictionCol=\"prediction\", metricName=\"rmse\")\n",
    "evaluator.evaluate(model_LR.transform(test_data_encoded)) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f14dada2",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "# `Model Tuning`\n",
    "\n",
    "* **Cross-Validation**\n",
    "* **Grid-Search**\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ce765125",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import the CrossValidator and ParamGridBuilder\n",
    "from pyspark.ml.tuning import CrossValidator, ParamGridBuilder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1a1f731c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create the ParamGridBuilder\n",
    "params = ParamGridBuilder().build()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "09a3043e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create the object of the Linear Regression Model\n",
    "model_LR_CV = LinearRegression(featuresCol= \"feature_vector\",  labelCol=\"Purchase\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "29d62ef6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create object of the cross validation model with numFolds = 3\n",
    "cv = CrossValidator(estimator=model_LR_CV,\n",
    "                    estimatorParamMaps=params,\n",
    "                    evaluator=evaluator,\n",
    "                    numFolds=3,\n",
    "                    seed=27)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bcf726fc",
   "metadata": {},
   "outputs": [],
   "source": [
    "## fit the model\n",
    "cv_model = cv.fit(train_data_encoded)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "78c8b248",
   "metadata": {},
   "outputs": [],
   "source": [
    "# evaluate the model\n",
    "evaluator = BinaryClassificationEvaluator(labelCol=\"ConversionStatus\",metricName=\"areaUnderROC\") \n",
    "evaluator.evaluate(cv_model.transform(train_data_encoded)) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f0786dcd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# evaluate model on validation data\n",
    "evaluator.evaluate(cv_model.transform(valid_data_encoded))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d946332",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "\n",
    "## `GRID SEARCH`\n",
    "\n",
    "Next, we will try the Grid Search where it will apply different combinations of parameter to give you the best model.\n",
    "\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9d013dfb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create parameter builder\n",
    "\n",
    "updated_params = ParamGridBuilder() \\\n",
    "                .addGrid(model_LR_CV.regParam, [0.01, 0.005, 0.0001]) \\\n",
    "                .addGrid(model_LR_CV.elasticNetParam, [0.1, 0.001]) \\\n",
    "                .build()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "53a4e9ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create object of the Cross Calidator with 3 folds\n",
    "cv = CrossValidator(estimator=model_LR_CV,\n",
    "                    estimatorParamMaps=updated_params,\n",
    "                    evaluator=evaluator,\n",
    "                    numFolds=3,\n",
    "                    seed=27)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a6fa5c49",
   "metadata": {},
   "outputs": [],
   "source": [
    "# fit the model\n",
    "grid_model = cv.fit(train_data_encoded)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c724feef",
   "metadata": {},
   "outputs": [],
   "source": [
    "# evaluate the model\n",
    "evaluator = BinaryClassificationEvaluator(labelCol=\"ConversionStatus\",metricName=\"areaUnderROC\") \n",
    "evaluator.evaluate(grid_model.transform(train_data_encoded))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e1975f41",
   "metadata": {},
   "outputs": [],
   "source": [
    "# evaluate model on validation data\n",
    "evaluator.evaluate(grid_model.transform(valid_data_encoded))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "428ac8b2",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "Get the best model parameters.\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cc8398b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# extract the best model parameters dictionary\n",
    "param_dict = grid_model.bestModel.extractParamMap()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2c4accac",
   "metadata": {},
   "outputs": [],
   "source": [
    "param_dict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7614aac1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# created a filtered dictionary\n",
    "final_dict = {}\n",
    "for k, v in param_dict.items():\n",
    "    final_dict[k.name] = v"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9771e59a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# get the best elastic net parameter\n",
    "final_dict[\"elasticNetParam\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7d91f0d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# get the best regularization parameter\n",
    "final_dict[\"regParam\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a2f3e637",
   "metadata": {},
   "source": [
    "### `Machine Learning Pipelines in Spark`\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c4870713",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Import the Required Libraries \n",
    "from pyspark.ml import Pipeline\n",
    "from pyspark.ml.feature import OneHotEncoderEstimator, StringIndexer, VectorAssembler\n",
    "from pyspark.ml import Transformer\n",
    "from pyspark.ml.param.shared import HasInputCol, HasOutputCol, Param\n",
    "from pyspark.ml import regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2a632143",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data_pipeline = spark.read.csv(\"spark_work/train.csv\", inferSchema=True, header=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b1713b94",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data_pipeline = train_data_pipeline.withColumn(\"Purchase\", F.col(\"Purchase\").cast(tp.IntegerType()))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1dd65f09",
   "metadata": {},
   "source": [
    "### Custom transformer "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dce85c9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# custom transformer to fill null values\n",
    "\n",
    "class nullValuesTransformer(Transformer):\n",
    "    \n",
    "    def __init__(self, dataframe = None):\n",
    "        self.dataframe = dataframe\n",
    "    \n",
    "    def _transform(self, dataframe):\n",
    "        dataframe = dataframe.fillna({\n",
    "           \"Product_ID\": \"U\",\n",
    "            \"Gender\":\"U\",\n",
    "            \"Age\":0,\n",
    "            \"Occupation\":50,\n",
    "            \"City_Category\": \"U\",\n",
    "            \"Stay_In_Current_City_Years\": 50,\n",
    "            \"Marital_Status\": \"\",\n",
    "            \"Product_Category_1\" : 0,\n",
    "            \"Product_Category_2\": \"U\",\n",
    "            \"Product_Category_3\": \"U\",\n",
    "        })\n",
    "        \n",
    "        return dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d87ff2c5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3244ae5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Stage 1 - replace null values\n",
    "stage_1 = nullValuesTransformer()\n",
    "\n",
    "# Stage 2 - label encode Age column\n",
    "stage_2 =  StringIndexer(inputCol=\"Age\", outputCol=\"Age_le\")\n",
    "\n",
    "# Stage 3 - label encode Gender column\n",
    "stage_3 = StringIndexer(inputCol=\"Gender\", outputCol=\"Gender_le\")\n",
    "\n",
    "# Stage 4 - label encode Stay_In_City_Years column\n",
    "stage_4 = StringIndexer(inputCol=\"Stay_In_Current_City_Years\", outputCol=\"Stay_le\")\n",
    "\n",
    "# Stage 5 - label encode City_Category column\n",
    "stage_5 = StringIndexer(inputCol=\"City_Category\", outputCol=\"City_le\")\n",
    "\n",
    "# Stage 6 - label encodeOccupation column\n",
    "stage_6 = StringIndexer(inputCol=\"Occupation\", outputCol=\"Occupation_le\")\n",
    "\n",
    "# Stage 7 - label encode Product_Category_1  column\n",
    "stage_7 = StringIndexer(inputCol=\"Product_Category_1\", outputCol=\"Product_Category_1_le\")\n",
    "\n",
    "# Stage 8 - label encode Product_Category_2 column\n",
    "stage_8 = StringIndexer(inputCol=\"Product_Category_2\", outputCol=\"Product_Category_2_le\")\n",
    "\n",
    "# Stage 9 - label encode Product_Category_3 column\n",
    "stage_9 = StringIndexer(inputCol=\"Product_Category_3\", outputCol=\"Product_Category_3_le\")\n",
    "\n",
    " # Stage 10 - One Hot Encode columns\n",
    "stage_10 = OneHotEncoderEstimator(inputCols= [\"Gender_le\", \"City_le\",\"Occupation_le\",\"Product_Category_1_le\",\"Product_Category_2_le\", \"Product_Category_3_le\"], \n",
    "                        outputCols= [\"country_ohe\",  \"browser_ohe\", \"os_ohe\", \"traffic_ohe\"])\n",
    "\n",
    "\n",
    "# Stage 11 - Create vector from the columns\n",
    "stage_11 = VectorAssembler(inputCols= ['Product_ID',\n",
    "                                             'Age_le',\n",
    "                                             'Gender_ohe',\n",
    "                                             'Occupation_ohe',\n",
    "                                             'City_ohe',\n",
    "                                             'Product_Category_1',\n",
    "                                             'Product_Category_2',\n",
    "                                             'Product_Category_3'],\n",
    "                                outputCol= 'feature_vector')\n",
    "\n",
    "# Stage 12 - Train ML model\n",
    "stage_12 = LinearRegression(featuresCol= \"feature_vector\", labelCol= \"Purchase\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "84f1f036",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark.ml import Pipeline\n",
    "\n",
    "# Define pipeline\n",
    "pipeline = Pipeline(stages= [stage_1,\n",
    "                             stage_2,\n",
    "                             stage_3,\n",
    "                             stage_4,\n",
    "                             stage_5,\n",
    "                             stage_6,\n",
    "                             stage_7,\n",
    "                             stage_8,\n",
    "                             stage_9,\n",
    "                             stage_10,\n",
    "                             stage_11,\n",
    "                             stage_12,\n",
    "                            ])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ee21dc5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# fit the pipeline with the training data\n",
    "pipeline_model = pipeline.fit(train_data_pipeline)\n",
    "\n",
    "# transform data\n",
    "final_data = pipeline_model.transform(train_data_pipeline)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "333e17a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Transform test_data\n",
    "final_test_data = pipeline_model.transform(test_data_pipeline)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1c03257d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5b69ab74",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "426ba7c9",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ec0785de",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
